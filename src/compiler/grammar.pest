WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{
    "/*" ~ (!"*/" ~ ANY)* ~ "*/"
    | "//" ~ (!("\r" | "\n") ~ ANY)* ~ ("\r" | "\n" | EOI)
}

identifier = @{
    !keyword ~ (ASCII_ALPHA | "_") ~ (ASCII_ALPHA | ASCII_DIGIT | "_")*
}

keyword = @{
    "if" | "else" | "while" | "for" | "break" | "continue" | "return"
    | "fn" | "class"
    | "and" | "or" | "not"
}

statements = {
	statement*
}

script = _{
	SOI ~ statements ~ EOI
}

block = _{
    "{" ~ statements ~ "}"
}

arguments = { "(" ~ (identifier ~ ("," ~ identifier)*)? ~ ")" }

function_def = {
    "fn" ~ arguments ~ block
}

// ============================================================================
// Literals
// ============================================================================
// Numbers
number = _{
	scinot_literal
    | float_literal
    | bin_literal
    | hex_literal
    | dec_literal
}
scinot_literal = @{ sign? ~ dec_literal ~ ("." ~ dec_literal)? ~ ("e" | "E") ~ dec_literal  }
float_literal = @{ sign? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
dec_literal = @{ sign? ~ ASCII_DIGIT+ }
hex_literal = @{ sign? ~ ("0x" | "0X") ~ ASCII_HEX_DIGIT+ }
bin_literal = @{ sign? ~ ("0b" | "0b") ~ ASCII_BIN_DIGIT+ }
sign = _{ "+" | "-" }

// Strings
string_literal = ${ "\"" ~ inner ~ "\"" }
inner = @{ char* }
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "n" | "r" | "t") // escaped characters
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4}) // unicode escape char
}

bool_literal = { "true" | "false" }
nil_literal = { "nil" }

// ============================================================================
// Expressions
// ============================================================================
expression = { prefix* ~ primary ~ (infix ~ prefix* ~ primary )* }
	infix = _{ add | sub | mul | div | rem | op_eq | op_neq | op_gte | op_lte | op_gt | op_lt | op_and | op_or }
    	add = { "+" }
        sub = { "-" }
        mul = { "*" }
        div = { "/" }
        rem = { "%" }
        op_eq = { "==" }
        op_neq = { "!=" }
        op_gte = { ">=" }
        op_lte = { "<=" }
        op_gt = { ">" }
        op_lt = { "<" }
        op_and = { "and" }
        op_or = { "or" }
    prefix = _{ neg }
    	neg = { "-" }
        not = { "not" }
    primary = _{
        number
        | string_literal
        | bool_literal
        | nil_literal
        | function_call
        | identifier
        | function_def
        | "(" ~ expression ~ ")"
    }

function_call = {
    identifier ~ "(" ~ (expression ~ ("," ~ expression)*)? ~ ")"
}

// ============================================================================
// Statements
// ============================================================================
statement = {
	assign
    | expression ~ ";"
    | if_statement
    | return_statement
}
assign = { identifier ~ "=" ~ expression ~ ";" }
return_statement = { "return" ~ expression? ~ ";" }

if_statement = {
    "if" ~ expression ~ block ~ (elseif_clause*) ~ (else_clause?) ~ ";"?
}
    elseif_clause = {
        "else if" ~ expression ~ block
    }
    else_clause = {
        "else" ~ block
    }
