// ============================================================================
// Special Rules
// ============================================================================
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{
    "/*" ~ (!"*/" ~ ANY)* ~ "*/"
    | "//" ~ (!("\r" | "\n") ~ ANY)* ~ ("\r" | "\n" | EOI)
}

// ============================================================================
// Basics
// ============================================================================
identifier = @{ !keyword ~ (ASCII_ALPHA | "_") ~ (ASCII_ALPHA | ASCII_DIGIT | "_")* }
keyword = @{
    // Control flow
    "if" | "else" | "while" | "for" | "break" | "continue" | "return"
    // Data types
    | "fn" | "class"
    // Operators
    | "and" | "or" | "not"
}
script = _{ SOI ~ statements ~ EOI }
block = _{ "{" ~ statements ~ "}" }

// ============================================================================
// Expressions
// ============================================================================
expression = { prefix* ~ primary ~ (infix ~ prefix* ~ primary )* }
    prefix = _{ unary_operator }
	infix = _{ binary_operator }
    primary = _{
        literal
        | function_atom
        | identifier
        | "(" ~ expression ~ ")"
    }

literal = _{ number | string_literal | bool_literal | nil_literal }
    number = _{ scinot_literal | float_literal | bin_literal | hex_literal | dec_literal }
        scinot_literal = @{ sign? ~ dec_literal ~ ("." ~ dec_literal)? ~ ("e" | "E") ~ dec_literal  }
        float_literal = @{ sign? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
        dec_literal = @{ sign? ~ ASCII_DIGIT+ }
        hex_literal = @{ sign? ~ ("0x" | "0X") ~ ASCII_HEX_DIGIT+ }
        bin_literal = @{ sign? ~ ("0b" | "0b") ~ ASCII_BIN_DIGIT+ }
        sign = _{ "+" | "-" }
    string_literal = ${ "\"" ~ inner ~ "\"" }
        inner = @{ char* }
        char = {
            !("\"" | "\\") ~ ANY
            | "\\" ~ ("\"" | "\\" | "n" | "r" | "t") // escaped characters
            | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4}) // unicode escape char
        }
    bool_literal = { "true" | "false" }
    nil_literal = { "nil" }

binary_operator = _{ add | sub | mul | div | rem | op_eq | op_neq | op_gte | op_lte | op_gt | op_lt | op_and | op_or }
    add = { "+" }
    sub = { "-" }
    mul = { "*" }
    div = { "/" }
    rem = { "%" }
    op_eq = { "==" }
    op_neq = { "!=" }
    op_gte = { ">=" }
    op_lte = { "<=" }
    op_gt = { ">" }
    op_lt = { "<" }
    op_and = { "and" }
    op_or = { "or" }

unary_operator = _{ neg | not }
    neg = { "-" }
    not = { "not" }

function_atom = _{ function_call | function_def }
    function_call = { identifier ~ "(" ~ (expression ~ ("," ~ expression)*)? ~ ")" }
    function_def = {
        "fn" ~ arguments ~ block
    }
        arguments = { "(" ~ (identifier ~ ("," ~ identifier)*)? ~ ")" }

// ============================================================================
// Statements
// ============================================================================
statements = { statement* }
    statement = {
        assign_statement
        | expression ~ ";"
        | control_flow_statement
    }
        assign_statement = { identifier ~ "=" ~ expression ~ ";" }

control_flow_statement = _{ return_statement | if_statement }
    jump_statement = _{ return_statement }
        return_statement = { "return" ~ expression? ~ ";" }
    if_statement = { "if" ~ expression ~ block ~ (elseif_clause*) ~ (else_clause?) ~ ";"? }
        elseif_clause = { "else if" ~ expression ~ block }
        else_clause = { "else" ~ block }
    loop_statement = _ { for_statement }
        for_statement = {
            "for" ~ "(" ~ (assign_statement)? ~ ";" ~ expression ~ ";" ~ (assign_statement)? ~ ")" ~ block
        }
